-- ---------------------------
-- 22 Advanced Business Problems
-- ---------------------------

-- 1. Top Selling Products
-- Query the top 10 products by total sales value.
-- Challenge: Include product name, total quantity sold, and total sales value.
/*
select
	ps.product_id,
	ps.product_name,
	sum(price_per_unit*quantity) as TotalSalesValue,
	sum(osi.quantity)
from orders os
	inner join order_items osi
		on os.order_id = osi.order_id
	inner join products ps
		on ps.product_id = osi.product_id
group by 1,2
order by 3 desc

limit 10
*/

-- 2. Revenue by Category
-- Calculate total revenue generated by each product category.
-- Challenge: Include the percentage contribution of each category to total revenue.

/*
with CTE as(
select
	cs.category_id,
	cs.category_name,
	sum(price_per_unit*quantity) as TotalRevenue
from order_items osi
	inner join products ps
	on osi.product_id = ps.product_id
	inner join category cs
	on cs.category_id = ps.category_id
group by 1,2
)

select
	*,
	(TotalRevenue / SUM(TotalRevenue) OVER()) * 100 AS Percentage
from CTE
order by 4 desc
*/

-- 3. Average Order Value (AOV)
-- Compute the average order value for each customer.
-- Challenge: Include only customers with more than 5 orders.
/*
SELECT
    cs.customer_id AS CustomerID,
    CONCAT(cs.first_name, ' ', cs.last_name) AS CustomerName,
    SUM(osi.price_per_unit * osi.quantity) AS TotalRevenue,
    COUNT(os.order_id) AS order_count,
    AVG(osi.price_per_unit * osi.quantity) AS AvgOrderValue
FROM orders os
	INNER JOIN order_items osi 
	ON os.order_id = osi.order_id
	INNER JOIN customers cs 
	ON cs.customer_id = os.customer_id
GROUP BY 1,2
HAVING COUNT(os.order_id) > 5
ORDER BY AvgOrderValue DESC;
*/

-- 4. Monthly Sales Trend
-- Query monthly total sales over the past year.
-- Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!

/*
select
	extract(month from order_date) as Month,
	extract(year from order_date) as Year,
	sum(
		case
			when extract(month from order_date) = extract(month from '2024-07-01'::DATE)
				then (price_per_unit* quantity)
			else 0
		end
	) as CurrentMonthSales,
	sum(
		case
			when extract(month from order_date) = extract(month from '2024-07-01'::DATE) - 1
				then (price_per_unit* quantity)
			else 0
		end
	) as LastMonthSales
from orders os
	inner join order_items osi
	on os.order_id = osi.order_id

where extract(year from order_date) = 2024 
group by 1,2
order by 2,1
*/

-- 5. Customers with No Purchases
-- Find customers who have registered but never placed an order.
-- Challenge: List customer details and the time since their registration.

/*
select
	cs.customer_id,
	cs.first_name,
	cs.last_name
from customers cs
where customer_id not in (select customer_id from orders)
*/

-- 6. Least-Selling Categories by State
-- Identify the least-selling product category for each state.
-- Challenge: Include the total sales for that category within each state.

/*
with CTE as(
	select
		ct.category_name,
		cs.state,
		sum(price_per_unit*quantity) as TotalRevenue,
		rank() over(partition by cs.state order by sum(price_per_unit*quantity)) as Rank
	from orders os
		inner join order_items osi
		on os.order_id = osi.order_id
		inner join customers cs
		on cs.customer_id = os.customer_id
		inner join products ps
		on ps.product_id = osi.product_id
		inner join category ct
		on ct.category_id = ps.category_id
	group by 1,2
)

select 
	* 
from CTE 
where Rank <=1
*/

-- 7. Customer Lifetime Value (CLTV)
-- Calculate the total value of orders placed by each customer over their lifetime.
-- Challenge: Rank customers based on their CLTV.

/*
select
	cs.customer_id,
	sum(price_per_unit*quantity) as TotalSpent,
	dense_rank() over(order by sum(price_per_unit*quantity) desc) as CLTV_Rank
from orders os
	inner join customers cs
	on os.customer_id = cs.customer_id
	inner join order_items osi
	on osi.order_id = os.order_id
group by 1
order by 3
*/

-- 8. Inventory Stock Alerts
-- Query products with stock levels below a certain threshold (e.g., less than 10 units).
-- Challenge: Include last restock date and warehouse information.

/*
select
	stock,
	last_stock_date
from inventory
where stock<10
*/

-- 9. Shipping Delays
-- Identify orders where the shipping date is later than 3 days after the order date.
-- Challenge: Include customer, order details, and delivery provider.

/*
select
	cs.customer_id,
	os.order_id,
	ss.seller_name,
	(shipping_date - order_date) as DateDifference
from orders os
	inner join customers cs
	on cs.customer_id = os.customer_id
	inner join sellers ss
	on ss.seller_id = os.seller_id
	inner join shipping sh
	on sh.order_id = os.order_id
where (shipping_date - order_date)>3 and shipping_date is not null
*/

-- 10. Payment Success Rate 
-- Calculate the percentage of successful payments across all orders.
-- Challenge: Include breakdowns by payment status (e.g., failed, pending).

/*
select
	py.payment_status,
	count(os.order_id),
	round(100.0*count(os.order_id)/sum(count (*)) over(),2) as percentage
from orders os
	inner join payments py
	on py.order_id = os.order_id
group by 1
order by 3 desc
*/

-- 11. Top Performing Sellers
-- Find the top 5 sellers based on total sales value.
-- Challenge: Include both successful and failed orders, and display their percentage of successful orders.

/*
with sellersales as(
	select
		ss.seller_id,
		ss.seller_name,
		sum(price_per_unit*quantity) as TotalSalesValue,
		count(os.order_id) as TotalOrders,
		count(case when py.payment_status = 'Payment Successed' then 1 end) as SuccessfulOrders
	from orders os
		inner join order_items as osi
		on os.order_id = osi.order_id
		inner join sellers ss
		on ss.seller_id = os.seller_id
		inner join payments py
		on py.order_id = os.order_id
	group by 1,2
),
sellerrank as(
	select
		seller_id,
		seller_name,
		TotalSalesValue,
		SuccessfulOrders,
		round(100.0*SuccessfulOrders/nullif(TotalOrders,0),2) as SuccessRate,
		rank() over (order by TotalSalesValue desc) as SalesRank
	from sellersales
)
select
	seller_id,
	seller_name,
	TotalSalesValue,
	SuccessRate 
from sellerrank
where SalesRank<=5
order by TotalSalesValue desc
*/

-- 12. Product Profit Margin
-- Calculate the profit margin for each product (difference between price and cost of goods sold).
-- Challenge: Rank products by their profit margin, showing highest to lowest.

/*
select
	product_id,
	price,
	cogs,
	round((price-cogs)::numeric,2) as Profit,
	round((100.0*(price-cogs)/price)::numeric,2) as ProfitMargin,
	dense_rank() over (order by round((100.0*(price-cogs)/price)::numeric,2) desc) as Rank
from products
*/

-- 13. Most Returned Products
-- Query the top 10 products by the number of returns.
-- Challenge: Display the return rate as a percentage of total units sold for each product.
/*
with totalproductssold as(
	select
		ps.product_id,
		ps.product_name,
		count(*) as TotalProdsSold
	from orders os 
		inner join order_items osi
		on os.order_id = osi.order_id
		inner join products ps
		on ps.product_id = osi.product_id
	group by 1,2
),
returnedprods as (
	select
		ps.product_id,
		count(*) as ReturnedProds
	from orders os
		inner join order_items osi
		on os.order_id = osi.order_id
		inner join products ps
		on ps.product_id = osi.product_id
	where order_status = 'Returned'
	group by 1
)

select 
	tps.product_id,
	TotalProdsSold,
	coalesce(ReturnedProds,0) as ReturnedProds,
	round((100*coalesce(ReturnedProds,0)/nullif(TotalProdsSold,0)),2) as ReturnPercentage
from totalproductssold as tps
	left join returnedprods rps
	on tps.product_id = rps.product_id
order by ReturnedProds desc

limit 10
*/

-- 14. Orders Pending Shipment
-- Find orders that have been paid but are still pending shipment.
-- Challenge: Include order details, payment date, and customer information.
/*
select
	os.order_id,
	py.payment_date,
	cs.customer_id,
	ss.shipping_id,
	ss.delivery_status
from orders os
	inner join customers cs
	on cs.customer_id = os.customer_id
	inner join payments py
	on py.order_id = os.order_id
	inner join shipping ss
	on ss.order_id = os.order_id
where py.payment_status = 'Payment Successed'  -- Order is paid
AND (ss.shipping_id IS NULL OR ss.delivery_status NOT IN ('Shipped', 'Delivered')) -- Shipment missing or not shipped
order by os.order_date asc
*/


-- 15. Inactive Sellers
-- Identify sellers who havenâ€™t made any sales in the last 6 months.
-- Challenge: Show the last sale date and total sales from those sellers.

/*
with CTE as(
	select
		ss.seller_id as SellerID,
		max(os.order_date) as LastOrderDate,
		sum(price_per_unit*quantity) as TotalSales
	from orders os
		inner join sellers ss
		on os.seller_id = ss.seller_id
		inner join order_items osi
		on osi.order_id = os.order_id
	group by 1
)
select
	SellerID,
	LastOrderDate,
	TotalSales
from CTE
where CTE.LastOrderDate<current_date - interval '6 month'
order by 1
*/

-- 16. Identify customers as returning or new
-- If the customer has done more than 5 returns, categorize them as returning, otherwise new.
-- Challenge: List customer ID, name, total orders, total returns.
/*
with CTE as
(
	select
		cs.customer_id as CustomerID,
		concat(cs.first_name, ' ', cs.last_name) as CustomerName,
		count(os.order_id) as OrderCount,
		count(case when order_status = 'Returned' then 1 end) as ReturnedCount
	from customers cs
		inner join orders os
		on os.customer_id = cs.customer_id
	group by 1,2
)
select
	CustomerID,
	CustomerName,
	OrderCount,
	ReturnedCount,
	case 
		when ReturnedCount>= 5 then 'Returning'
		else 'New'
	end as CustomerType
from CTE
order by 1
*/

-- 17. Average Order Value (AOV)
-- Compute the average order value for each customer.
-- Challenge: Include only customers with more than 5 orders.
/*
SELECT
    cs.customer_id AS CustomerID,
    CONCAT(cs.first_name, ' ', cs.last_name) AS CustomerName,
    SUM(osi.price_per_unit * osi.quantity) AS TotalRevenue,
    COUNT(os.order_id) AS order_count,
    AVG(osi.price_per_unit * osi.quantity) AS AvgOrderValue
FROM orders os
	INNER JOIN order_items osi 
	ON os.order_id = osi.order_id
	INNER JOIN customers cs 
	ON cs.customer_id = os.customer_id
GROUP BY 1,2
HAVING COUNT(os.order_id) > 
ORDER BY AvgOrderValue DESC;
*/


-- 18. Top 5 Customers by Orders in Each State
-- Identify the top 5 customers with the highest number of orders for each state.
-- Challenge: Include the number of orders and total sales for each customer.

/*
with CTE as(
	select
		cs.customer_id,
		concat(cs.first_name, ' ', cs.last_name) as CustomerName,
		cs.state,
		count(os.order_id) as TotalOrders,
		sum(price_per_unit * quantity) as TotalSpent,
		dense_rank() over(partition by cs.state order by count(os.order_id) desc,sum(price_per_unit * quantity) desc ) as Rank
	from orders os
		inner join order_items osi
		on osi.order_id = os.order_id
		inner join customers cs
		on cs.customer_id = os.customer_id
	group by 1,2,3
)
select
	customer_id,
	CustomerName,
	state,
	TotalOrders,
	TotalSpent,
	Rank
from CTE
where rank <=5
*/

-- 19. Revenue by Shipping Provider
-- Calculate the total revenue handled by each shipping provider.
-- Challenge: Include the total number of orders handled and the average delivery time for each provider.

/*
select
	ss.seller_id,
	ss.seller_name,
	count(os.order_id) as TotalOrders,
	sum(price_per_unit * quantity) as TotalRevenue,
	round(avg (shipping_date - order_date),2) as DateDifference
from orders os
	inner join order_items osi
	on os.order_id = osi.order_id
	inner join sellers ss
	on ss.seller_id = os.seller_id
	left join shipping sg
	on sg.order_id = os.order_id
group by 1,2
order by TotalRevenue Desc
*/

-- 20. Top 10 Products with Highest Decreasing Revenue Ratio
-- Compare revenue between last year (2022) and the current year (2023).
-- Challenge: Return product_id, product_name, category_name, 2022 revenue, 2023 revenue, and decrease ratio (rounded).
-- Note: Decrease ratio = (current_year - last_year) / last_year * 100
/*
with CTE as(
	select
		ps.product_id,
		ps.product_name,
		cg.category_name,
		sum(case when extract(year from os.order_date) = 2022 then price_per_unit*quantity end) as TotalRevenue_22,
		sum(case when extract(year from os.order_date) = 2023 then price_per_unit*quantity end) as TotalRevenue_23
	from orders os
		inner join order_items osi
		on osi.order_id = os.order_id
		inner join products ps
		on ps.product_id = osi.product_id
		inner join category cg
		on cg.category_id = ps.category_id
	group by 1,2,3
)
select
	product_id,
	product_name,
	category_name,
	TotalRevenue_22,
	coalesce(TotalRevenue_23,0) as TotalRevenue_23,
	round((100*(coalesce(TotalRevenue_23,0)-TotalRevenue_22)/nullif(TotalRevenue_22,0))::numeric,2) as DecreaseRatio
from CTE
order by 6 asc

limit 10
*/

